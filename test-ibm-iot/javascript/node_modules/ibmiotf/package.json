{
  "name": "ibmiotf",
  "version": "0.1.1",
  "description": "A library for developing device and application clients for IBM Internet of Things Foundation",
  "keywords": [
    "ibm",
    "iot",
    "iotf"
  ],
  "readmeFilename": "README.md",
  "dependencies": {
    "mqtt": "^1.3.4",
    "in-array": "^0.1.0",
    "request": "*",
    "q": "*",
    "log4js": "*",
    "properties-reader": "^0.0.10"
  },
  "author": {
    "name": "Jeffrey Dare",
    "email": "jeffdare@in.ibm.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ibm-messaging/iot-nodejs.git"
  },
  "license": "Apache",
  "readme": "Node.js Client Library\r\n========================\r\n\r\nThe node.js client is used for simplifying the interacting with the Internet of Things Foundation. The following libraries contain instructions and guidance on using the nodejs ibmiotf node to interact with devices and applications within your organizations.\r\n\r\nThis client library is divided into two parts, Device and Application. The Devices section contains information on how devices publish events and handle commands using the nodejs ibmiotf module, and the Applications section contains information on how applications can use the nodejs ibmiotf module to interact with devices.\r\n\r\nDevices\r\n===============================\r\n\r\n*IotfDevice* is device client for the Internet of Things Foundation\r\nservice. You can use this client to connect to the service, publish\r\nevents from the device and subscribe to commands.\r\n\r\nConstructor\r\n-----------\r\n\r\nThe constructor builds the device client instance. It accepts an\r\nconfiguration json containing the following :\r\n\r\n-   org - Your organization ID\r\n-   type - The type of your device\r\n-   id - The ID of your device\r\n-   auth-method - Method of authentication (the only value currently\r\n    supported is “token”)\r\n-   auth-token - API key token (required if auth-method is “token”)\r\n\r\nIf you want to use quickstart, then send only the first three\r\nproperties.\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfDevice;\r\nvar config = {\r\n    \"org\" : \"organization\",\r\n    \"id\" : \"deviceId\",\r\n    \"type\" : \"deviceType\",\r\n    \"auth-method\" : \"token\",\r\n    \"auth-token\" : \"authToken\"\r\n};\r\n\r\nvar deviceClient = new Client(config);\r\n\r\n....\r\n```\r\n\r\n#### Using a configuration file\r\n\r\nInstead of passing the configuration json directly, you can also use a\r\nconfiguration file. Use the following code snippet\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfDevice;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar deviceClient = new Client(config);\r\n\r\n....\r\n```\r\n\r\nThe configuration file must be in the format of\r\n\r\n``` {.sourceCode .}\r\norg=$orgId\r\ntype=$myDeviceType\r\nid=$myDeviceId\r\nauth-method=token\r\nauth-token=$token\r\n```\r\n\r\nConnect\r\n-------\r\n\r\nConnect to the Internet of Things Foundation by calling the *connect*\r\nfunction\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfDevice;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar deviceClient = new Client(config);\r\n\r\ndeviceClient.connect();\r\n\r\ndeviceClient.on(\"connect\", function () {\r\n\r\n//Add your code here\r\n});\r\n\r\n....\r\n```\r\n\r\nAfter the successful connection to the IoTF service, the device client\r\nemits *connect* event. So all the device logic can be implemented inside\r\nthis callback function.\r\n\r\nPublishing events\r\n------------------\r\n\r\nEvents are the mechanism by which devices publish data to the Internet\r\nof Things Foundation. The device controls the content of the event and\r\nassigns a name for each event it sends.\r\n\r\nWhen an event is received by the IOT Foundation the credentials of the\r\nconnection on which the event was received are used to determine from\r\nwhich device the event was sent. With this architecture it is impossible\r\nfor a device to impersonate another device.\r\n\r\nEvents can be published at any of the three quality of service levels\r\ndefined by the MQTT protocol. By default events will be published as qos\r\nlevel 0.\r\n\r\nEvents can be published by using\r\n\r\n-   eventType - Type of event to be published e.g status, gps\r\n-   eventFormat - Format of the event e.g json\r\n-   data - Payload of the event\r\n-   QoS - qos for the publish event. Supported values : 0,1,2\r\n\r\n``` {.sourceCode .javascript}\r\nvar config = IotfDevice.ParseConfigFile(configFilePath);    \r\nvar client = new IotfDevice(config);\r\n\r\nclient.connect();\r\n\r\nclient.on(\"connect\", function () {\r\n    //publishing event using the default quality of service\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}');\r\n\r\n    //publishing event using the user-defined quality of service\r\n    var myQosLevel=2\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}', myQosLevel); \r\n});\r\n\r\n....\r\n```\r\n\r\nHandling commands\r\n------------------\r\n\r\nWhen the device client connects, it automatically subscribes to any\r\ncommand for this device. To process specific commands you need to\r\nregister a command callback function. The device client emits *command*\r\nwhen a command is received. The callback function has the following\r\nproperties\r\n\r\n-   commandName - name of the command invoked\r\n-   format - e.g json, xml\r\n-   payload - payload for the command\r\n-   topic - actual topic where the command was received\r\n\r\n``` {.sourceCode .javascript}\r\nvar config = IotfDevice.ParseConfigFile(configFilePath);    \r\nvar client = new IotfDevice(config);\r\n\r\nclient.connect();\r\n\r\nclient.on(\"connect\", function () {\r\n    //publishing event using the default quality of service\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}');\r\n\r\n});\r\n\r\nclient.on(\"command\", function (commandName,format,payload,topic) {\r\n    if(commandName === \"blink\") {\r\n        console.log(blink);\r\n        //function to be performed for this command\r\n        blink(payload);\r\n    } else {\r\n        console.log(\"Command not supported.. \" + commandName);\r\n    }\r\n});\r\n.... \r\n```\r\n\r\nDisconnect Client\r\n--------------------\r\n\r\nDisconnects the client and releases the connections\r\n\r\n``` {.sourceCode .javascript}\r\nvar config = IotfDevice.ParseConfigFile(configFilePath);    \r\nvar client = new IotfDevice(config);\r\n\r\nclient.connect();\r\n\r\nclient.on(\"connect\", function () {\r\n    //publishing event using the default quality of service\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}');\r\n\r\n    //publishing event using the user-defined quality of service\r\n    var myQosLevel=2\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}', myQosLevel); \r\n\r\n    //disconnect the client\r\n    client.disconnect();\r\n});\r\n\r\n....\r\n```\r\n\r\nCheck Connection Status\r\n--------------------------\r\n\r\n*isConnected* gives the current status of the client connection\r\n\r\n``` {.sourceCode .javascript}\r\n//publishing event using the default quality of service\r\nif(client.isConnected) {\r\n    client.publish(\"status\",\"json\",'{\"d\" : { \"cpu\" : 60, \"mem\" : 50 }}');\r\n}\r\n\r\n\r\n....\r\n```\r\n\r\nApplication\r\n==============\r\n\r\n*IotfApplication* is application client for the Internet of Things\r\nFoundation service. This section contains information on how\r\napplications interact with devices.\r\n\r\nConstructor\r\n-----------\r\n\r\nThe constructor builds the application client instance. It accepts an\r\nconfiguration json containing the following :\r\n\r\n-   org - Your organization ID\r\n-   id - The unique ID of your application within your organization.\r\n-   auth-key - API key\r\n-   auth-token - API key token\r\n\r\nIf you want to use quickstart, then send only the first two properties.\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\nvar config = {\r\n    \"org\" : orgId,\r\n    \"id\" : appId,\r\n    \"auth-key\" : apiKey,\r\n    \"auth-token\" : apiToken\r\n}\r\n\r\nvar appClient = new Client(config);\r\n\r\n....\r\n```\r\n\r\n### Using a configuration file\r\n\r\nInstead of passing the configuration json directly, you can also use a\r\nconfiguration file. Use the following code snippet\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\n....\r\n```\r\n\r\nThe configuration file must be in the format of\r\n\r\n``` {.sourceCode .}\r\norg=$orgId\r\nid=$myUniqueIs\r\nauth-key=$apiKey\r\nauth-token=$token\r\n```\r\n\r\nConnect\r\n-------\r\n\r\nConnect to the Internet of Things Foundation by calling the *connect*\r\nfunction\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n//Add your code here\r\n});\r\n\r\n....\r\n```\r\n\r\nAfter the successful connection to the IoTF service, the application\r\nclient emits *connect* event. So all the logic can be implemented inside\r\nthis callback function.\r\n\r\nSubscribing to device events\r\n----------------------------\r\n\r\nEvents are the mechanism by which devices publish data to the Internet\r\nof Things Foundation. The device controls the content of the event and\r\nassigns a name for each event it sends.\r\n\r\nWhen an event is received by the IOT Foundation the credentials of the\r\nconnection on which the event was received are used to determine from\r\nwhich device the event was sent. With this architecture it is impossible\r\nfor a device to impersonate another device.\r\n\r\nBy default, applications will subscribe to all events from all connected\r\ndevices. Use the type, id, event and msgFormat parameters to control the\r\nscope of the subscription. A single client can support multiple\r\nsubscriptions. The code samples below give examples of how to subscribe\r\nto devices dependent on device type, id, event and msgFormat parameters.\r\n\r\n### To subscribe to all events from all devices\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents();\r\n});\r\n\r\n....\r\n```\r\n\r\n#### To subscribe to all events from all devices of a specific type\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents(\"mydeviceType\");\r\n});\r\n\r\n....\r\n```\r\n\r\n#### To subscribe to a specific event from all devices\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents(\"+\",\"+\",\"myevent\");\r\n});\r\n\r\n....\r\n```\r\n\r\n#### To subscribe to a specific event from two or more different devices\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents(\"myDeviceType\",\"device01\",\"myevent\");\r\n    appClient.subscribeToDeviceEvents(\"myOtherDeviceType\",\"device02\",\"myevent\");\r\n});\r\n\r\n....\r\n```\r\n\r\n#### To subscribe to all events published by a device in json format\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents(\"myDeviceType\",\"device01\",\"+\",\"json\");\r\n\r\n});\r\n\r\n....\r\n```\r\n\r\nHandling events from devices\r\n----------------------------\r\n\r\nTo process the events received by your subscriptions you need to\r\nimplement an device event callback method. The ibmiotf application\r\nclient emits the event *deviceEvent*. This function has the following\r\nproperties\r\n\r\n-   deviceType\r\n-   deviceId\r\n-   eventType\r\n-   format\r\n-   payload - Device event payload\r\n-   topic - Original topic\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceEvents(\"myDeviceType\",\"device01\",\"+\",\"json\");\r\n\r\n});\r\nappClient.on(\"deviceEvent\", function (deviceType, deviceId, eventType, format, payload) {\r\n\r\n    console.log(\"Device Event from :: \"+deviceType+\" : \"+deviceId+\" of event \"+eventType+\" with payload : \"+payload);\r\n\r\n});\r\n\r\n....\r\n```\r\n\r\nSubscribing to device status\r\n----------------------------\r\n\r\nBy default, this will subscribe to status updates for all connected\r\ndevices. Use the type and id parameters to control the scope of the\r\nsubscription. A single client can support multiple subscriptions.\r\n\r\n### Subscribe to status updates for all devices\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceStatus();\r\n\r\n});\r\n```\r\n\r\n#### Subscribe to status updates for all devices of a specific type\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceStatus(\"myDeviceType\");\r\n\r\n});\r\n```\r\n\r\n#### Subscribe to status updates for two different devices\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceStatus(\"myDeviceType\",\"device01\");\r\n    appClient.subscribeToDeviceStatus(\"myOtherDeviceType\",\"device02\");\r\n\r\n});\r\n```\r\n\r\nHandling status updates from devices\r\n------------------------------------\r\n\r\nTo process the status updates received by your subscriptions you need to\r\nimplement an device status callback method. The ibmiotf application\r\nclient emits the event *deviceStatus*. This function has the following\r\nproperties\r\n\r\n-   deviceType\r\n-   deviceId\r\n-   payload - Device status payload\r\n-   topic\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    appClient.subscribeToDeviceStatus(\"myDeviceType\",\"device01\");\r\n    appClient.subscribeToDeviceStatus(\"myOtherDeviceType\",\"device02\");\r\n\r\n});\r\nappClient.on(\"deviceStatus\", function (deviceType, deviceId, payload, topic) {\r\n\r\n    console.log(\"Device status from :: \"+deviceType+\" : \"+deviceId+\" with payload : \"+payload);\r\n\r\n});\r\n```\r\n\r\nPublishing events from devices\r\n------------------------------\r\n\r\nApplications can publish events as if they originated from a Device. The\r\nfunction requires\r\n\r\n-   DeviceType\r\n-   Device ID\r\n-   Event Type\r\n-   Format\r\n-   Data\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    var myData={'name' : 'foo', 'cpu' : 60, 'mem' : 50}\r\n    appClient.publishDeviceEvent(\"myDeviceType\",\"device01\", \"myEvent\", \"json\", myData);\r\n\r\n});\r\n```\r\n\r\nPublishing commands to devices\r\n------------------------------\r\n\r\nApplications can publish commands to connected devices. The function\r\nrequires\r\n\r\n-   DeviceType\r\n-   Device ID\r\n-   Command Type\r\n-   Format\r\n-   Data\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    var myData={'DelaySeconds' : 10}\r\n    appClient.publishDeviceCommand(\"myDeviceType\",\"device01\", \"reboot\", \"json\", myData);\r\n\r\n});\r\n```\r\n\r\nDisconnect Client\r\n-----------------\r\n\r\nDisconnects the client and releases the connections\r\n\r\n``` {.sourceCode .javascript}\r\nvar Client = require(\"ibmiotf\").IotfApplication;\r\n\r\nvar config = Client.parseConfigFile(configFilePath);    \r\nvar appClient = new Client(config);\r\n\r\nappClient.connect();\r\n\r\nappClient.on(\"connect\", function () {\r\n\r\n    var myData={'DelaySeconds' : 10}\r\n    appClient.publishDeviceCommand(\"myDeviceType\",\"device01\", \"reboot\", \"json\", myData);\r\n\r\n    appClient.disconnect();\r\n});\r\n```\r\n\r\nCheck Connection Status\r\n-----------------------\r\n\r\n*isConnected* gives the current status of the application client\r\nconnection\r\n\r\n``` {.sourceCode .javascript}\r\nif(client.isConnected) {\r\n    ....\r\n    ....\r\n}\r\n```",
  "bugs": {
    "url": "https://github.com/ibm-messaging/iot-nodejs/issues"
  },
  "_id": "ibmiotf@0.1.1",
  "dist": {
    "shasum": "745a390b4d61c91f7b3c7f5d055d15d08b579b23"
  },
  "_from": "ibmiotf@",
  "_resolved": "https://registry.npmjs.org/ibmiotf/-/ibmiotf-0.1.1.tgz"
}
